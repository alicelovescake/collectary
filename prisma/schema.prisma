datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String             @id @default(cuid())
  email       String             @unique
  password    Password?
  name        String
  username    String
  lists       List[]
  sharedLists ListCollaborator[]
  comments    Comment[]
  notes       Notes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model List {
  id            String             @id @default(cuid())
  items         Item[]
  user          User               @relation(fields: [userId], references: [id])
  userId        String
  name          String
  description   String?
  isPublic      Boolean            @default(false)
  allowComments Boolean            @default(false)
  collaborators ListCollaborator[]
  comments      Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ListCollaborator {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  list   List   @relation(fields: [listId], references: [id])
  userId String
  listId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id       String    @id @default(cuid())
  list     List?     @relation(fields: [listId], references: [id])
  listId   String?
  url      String?
  name     String
  done     Boolean   @default(false)
  rank     Int
  favorite Boolean   @default(false)
  comments Comment[]
  notes    Notes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id     String  @id @default(cuid())
  body   String
  user   User    @relation(fields: [userId], references: [id])
  userId String
  item   Item?   @relation(fields: [itemId], references: [id])
  itemId String?
  list   List?   @relation(fields: [listId], references: [id])
  listId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notes {
  id     String @id @default(cuid())
  body   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
